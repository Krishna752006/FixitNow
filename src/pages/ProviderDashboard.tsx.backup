import React, { useState, useEffect, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { api, ProfessionalStats, Job, Notification, Professional, User } from '@/services/api';
import { toast } from '@/components/ui/use-toast';
import JobStatusBadge from '@/components/JobStatusBadge';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Calendar } from '@/components/ui/calendar';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { useRealTime } from '@/contexts/RealTimeContext';
import { Input } from '@/components/ui/input';
import {
  DollarSign,
  Clock,
  Star,
  MessageCircle,
  User as UserIcon,
  Bell,
  TrendingUp,
  CheckCircle2,
  X,
  Calendar as CalendarIcon,
  BarChart3,
  Settings,
  MapPin,
  Phone,
  Mail,
  Wrench,
  LogOut,
  Power,
  Loader2,
  Eye,
  Check,
  AlertCircle,
  Navigation,
  Globe
} from 'lucide-react';

import BankAccountForm from '@/components/BankAccountForm';
import PayoutRequestDialog from '@/components/PayoutRequestDialog';
import PayoutHistory from '@/components/PayoutHistory';

const ProviderDashboard = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [dashboardStats, setDashboardStats] = useState<ProfessionalStats | null>(null);
  const [jobs, setJobs] = useState<Job[]>([]);
  const [availableJobs, setAvailableJobs] = useState<Job[]>([]);
  const [completedJobs, setCompletedJobs] = useState<Job[]>([]);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [isLoadingStats, setIsLoadingStats] = useState(true);
  const [isLoadingJobs, setIsLoadingJobs] = useState(false);
  const [isLoadingAvailableJobs, setIsLoadingAvailableJobs] = useState(false);

  const { notifications: rtNotifications, unreadCount, markNotificationAsRead, markAllNotificationsAsRead } = useRealTime();
  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);
  const [isUpdatingAvailability, setIsUpdatingAvailability] = useState(false);
  const [isPayoutDialogOpen, setIsPayoutDialogOpen] = useState(false);
  const [availableBalance, setAvailableBalance] = useState(0);
  const [payoutBalance, setPayoutBalance] = useState<any>(null);
  const [isLoadingPayoutBalance, setIsLoadingPayoutBalance] = useState(false);
  const [isCompleteJobDialogOpen, setIsCompleteJobDialogOpen] = useState(false);
  const [selectedJob, setSelectedJob] = useState<Job | null>(null);
  const [finalPrice, setFinalPrice] = useState<number | undefined>(undefined);
  const [profileData, setProfileData] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    bio: '',
    city: '',
    zipCode: '',
    services: [] as string[],
  });
  const [isUpdatingProfile, setIsUpdatingProfile] = useState(false);


  const navigate = useNavigate();
  
  // Simple debounce helper
  const debounce = useMemo(() => {
    let t: any;
    return (fn: (...args: any[]) => void, wait = 400) => {
      clearTimeout(t);
      t = setTimeout(() => fn(), wait);
    };
  }, []);

  const { user, userType, isAuthenticated, logout, isLoading, updateUserLocal } = useAuth();

  const getUserName = (jobUser: string | User) => {
    if (typeof jobUser === 'string') return 'User';
    return `${jobUser.firstName || ''} ${jobUser.lastName || ''}`.trim();
  };

  const getUserInitials = (jobUser: string | User) => {
    if (typeof jobUser === 'string') return 'U';
    return `${jobUser.firstName?.[0] || ''}${jobUser.lastName?.[0] || ''}`.toUpperCase();
  };

  useEffect(() => {
    if (!isAuthenticated || !user || userType !== 'professional') {
      navigate('/login');
      return;
    }

    console.log('Provider Dashboard mounted, user:', user);
    
    // Load all data
    loadDashboardStats();
    loadJobs();
    loadAvailableJobs();
    loadCompletedJobs();
    loadNotifications();
    loadPayoutBalance();

    // Set profile data from user
    if (user) {
      setProfileData({
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        phone: user.phone || '',
        bio: (user as Professional).bio || '',
        city: (user as Professional).city || '',
        zipCode: (user as Professional).zipCode || '',
        services: (user as Professional).services || [],
      });
    }
  }, [isAuthenticated, user]);

  // Debug: Log availableJobs state changes
  useEffect(() => {
    console.log('availableJobs state changed:', {
      count: availableJobs.length,
      jobs: availableJobs
    });
  }, [availableJobs]);

  const loadDashboardStats = async () => {
    try {
      setIsLoadingStats(true);
      const response = await api.getProfessionalDashboardStats();
      if (response.success) {
        setDashboardStats(response.data.stats);
      }
    } catch (error) {
      console.error('Error loading dashboard stats:', error);
      toast({
        title: "Error",
        description: "Failed to load dashboard statistics",
        variant: "destructive",
      });
    } finally {
      setIsLoadingStats(false);
    }
  };

  const loadJobs = async (status?: string) => {
    try {
      setIsLoadingJobs(true);
      const response = await api.getProfessionalJobs(1, 10, status);
      if (response.success) {
        setJobs(response.data.jobs);
      }
    } catch (error) {
      console.error('Error loading jobs:', error);
      toast({
        title: "Error",
        description: "Failed to load jobs",
        variant: "destructive",
      });
    } finally {
      setIsLoadingJobs(false);
    }
  };

  const loadAvailableJobs = async () => {
    try {
      setIsLoadingAvailableJobs(true);
      const response = await api.getAvailableJobs(1, 10);
      console.log('=== AVAILABLE JOBS DEBUG ===');
      console.log('Full API response:', JSON.stringify(response, null, 2));
      console.log('Response success:', response.success);
      console.log('Response data:', response.data);
      console.log('Jobs array:', response.data?.jobs);
      console.log('Jobs count:', response.data?.jobs?.length);
      console.log('============================');
      
      if (response.success) {
        const jobs = response.data.jobs || [];
        setAvailableJobs(jobs);
        console.log('State updated with jobs:', jobs);
        
        if (jobs.length > 0) {
          toast({
            title: "Jobs Loaded",
            description: `Found ${jobs.length} available job(s)`,
          });
        } else {
          toast({
            title: "No Jobs",
            description: "No matching jobs found. Check Debug Matching for details.",
            variant: "default",
          });
        }
      } else {
        console.error('API returned success: false', response);
        toast({
          title: "Error",
          description: response.message || "Failed to load jobs",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Error loading available jobs:', error);
      toast({
        title: "Error",
        description: "Failed to load available jobs",
        variant: "destructive",
      });
    } finally {
      setIsLoadingAvailableJobs(false);
    }
  };

  const loadCompletedJobs = async () => {
    if (!user) return;
    
    try {
      const response = await api.getProfessionalJobs(1, 10, 'completed');
      if (response.success) {
        setCompletedJobs(response.data.jobs);
        console.log('Completed jobs loaded:', response.data.jobs.length);
      }
    } catch (error) {
      console.error('Error loading completed jobs:', error);
    }
  };

  const debugJobMatching = async () => {
    try {
      const response = await api.debugJobMatching();
      if (response.success) {
        console.log('Debug data:', response.data);
        toast({
          title: "Debug Info",
          description: `All: ${response.data.debug.allPendingJobs}, Services: ${response.data.debug.serviceMatchingJobs}, City: ${response.data.debug.cityMatchingJobs}, Matching: ${response.data.debug.fullyMatchingJobs}`,
        });
      }
    } catch (error) {
      console.error('Debug error:', error);
      toast({
        title: "Error",
        description: "Failed to debug job matching",
        variant: "destructive",
      });
    }
  };

  const loadNotifications = async () => {
    try {
      const response = await api.getProfessionalNotifications(1, 10);
      if (response.success) {
        setNotifications(response.data.notifications);
      }
    } catch (error) {
      console.error('Error loading notifications:', error);
    }
  };

  const loadPayoutBalance = async () => {
    try {
      setIsLoadingPayoutBalance(true);
      const response = await api.getPayoutBalance();
      if (response.success) {
        setPayoutBalance(response.data);
        setAvailableBalance(response.data.availableBalance);
      }
    } catch (error) {
      console.error('Error loading payout balance:', error);
    } finally {
      setIsLoadingPayoutBalance(false);
    }
  };

  const handleAcceptJob = async (jobId: string) => {
    try {
      const response = await api.acceptJob(jobId);
      if (response.success) {
        toast({
          title: "Success",
          description: "Job accepted successfully!",
        });
        // Refresh all data
        await Promise.all([
          loadJobs(),
          loadAvailableJobs(),
          loadDashboardStats()
        ]);
      } else {
        toast({
          title: "Error",
          description: response.message || "Failed to accept job",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Error accepting job:', error);
      toast({
        title: "Error",
        description: "Failed to accept job. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleToggleAvailability = async (checked: boolean) => {
    const previous = user.isActive;
    setIsUpdatingAvailability(true);

    // Optimistic update
    if (updateUserLocal) {
      updateUserLocal({ isActive: checked });
    }

    try {
      // Update the user's availability status
      const response = await api.updateProfessionalProfile({ isActive: checked });
      if (response.success) {
        toast({ title: "Success", description: "Availability updated successfully" });
        // Refresh dashboard data
        loadDashboardStats();
      } else {
        // Rollback on server-side rejection
        if (updateUserLocal) {
          updateUserLocal({ isActive: previous });
        }
        toast({ title: "Error", description: response.message || 'Failed to update availability', variant: 'destructive' });
      }
    } catch (error) {
      // Rollback on network or other errors
      if (updateUserLocal) {
        updateUserLocal({ isActive: previous });
      }
      console.error('Error updating availability:', error);
      toast({ title: "Error", description: "Failed to update availability", variant: "destructive" });
    } finally {
      setIsUpdatingAvailability(false);
    }
  };

  const handleCompleteJob = async () => {
    if (!selectedJob) return;

    try {
      const response = await api.completeJob(selectedJob._id, finalPrice);
      if (response.success) {
        toast({ title: "Success", description: "Job marked as complete!" });
        setIsCompleteJobDialogOpen(false);
        // Refresh all data
        await Promise.all([
          loadJobs(),
          loadCompletedJobs(),
          loadDashboardStats(),
        ]);
      } else {
        toast({ title: "Error", description: response.message || 'Failed to complete job', variant: 'destructive' });
      }
    } catch (error) {
      console.error('Error completing job:', error);
      toast({ title: "Error", description: "Failed to complete job. Please try again.", variant: 'destructive' });
    }
  };

  const handleServiceChange = (service: string) => {
    setProfileData(prevData => {
      const services = prevData.services.includes(service)
        ? prevData.services.filter(s => s !== service)
        : [...prevData.services, service];
      return { ...prevData, services };
    });
  };

  const handleUpdateProfile = async () => {
    try {
      setIsUpdatingProfile(true);
      const response = await api.updateProfessionalProfile(profileData);
      if (response.success) {
        toast({ 
          title: "Success", 
          description: "Profile updated successfully" 
        });
        // Update local user data
        if (updateUserLocal && response.data?.professional) {
          updateUserLocal(response.data.professional);
        }
      } else {
        toast({ 
          title: "Error", 
          description: response.message || "Failed to update profile", 
          variant: "destructive" 
        });
      }
    } catch (error) {
      console.error('Error updating profile:', error);
      toast({ 
        title: "Error", 
        description: "Failed to update profile. Please try again.", 
        variant: "destructive" 
      });
    } finally {
      setIsUpdatingProfile(false);
    }
  };

  // Get current location services
  const currentLocationServices = useMemo(() => {
    if (!user || !(user as Professional).city) return [];
    
    const professional = user as Professional;
    return professional.services?.filter(service => {
      // Filter services based on city demand (this could be enhanced with real data)
      const cityServices = {
        'Plumbing': ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Kolkata'],
        'Electrical': ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Kolkata', 'Hyderabad'],
        'Carpentry': ['Mumbai', 'Delhi', 'Bangalore', 'Chennai'],
        'Painting': ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Kolkata'],
        'Cleaning': ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Kolkata', 'Hyderabad'],
        'Appliance Repair': ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Kolkata'],
        'HVAC': ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Kolkata'],
        'Landscaping': ['Mumbai', 'Delhi', 'Bangalore', 'Chennai'],
        'Handyman': ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Kolkata', 'Hyderabad'],
      };
      
      return cityServices[service as keyof typeof cityServices]?.includes(professional.city) || true;
    }) || [];
  }, [user]  );

  const handleLogout = () => {
    logout();
    navigate('/');
  };

  const handleTabChange = (value: string) => {
    setActiveTab(value);
    if (value === 'earnings') {
      loadPayoutBalance();
    }
  };

  const handlePayoutSuccess = () => {
    loadPayoutBalance();
    loadDashboardStats();
  };

  // Generate user initials for avatar
  const userInitials = user ? `${user.firstName?.[0] || ''}${user.lastName?.[0] || ''}`.toUpperCase() : '';

  // Format user's full name
  const fullName = user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() : '';

  // Loading state
  if (isLoading || !user) {
    return (
      <div className="min-h-screen dashboard-bg-pro flex items-center justify-center">
        <div className="text-center glass-card p-8 rounded-xl animate-pulse-glow">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-accent mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  // Create animated particles for background
  const renderParticles = () => {
    const particles = [];
    for (let i = 0; i < 8; i++) {
      const size = Math.floor(Math.random() * 40) + 10;
      const left = Math.floor(Math.random() * 100);
      const animationDuration = Math.floor(Math.random() * 20) + 10;
      const delay = Math.floor(Math.random() * 10);

      particles.push(
        <div
          key={i}
          className="particle animate-float"
          style={{
            width: size + 'px',
            height: size + 'px',
            left: left + '%',
            top: Math.floor(Math.random() * 100) + '%',
            opacity: Math.random() * 0.3,
            background: `hsl(var(--accent) / 0.3)`,
            animation: `particleFloat ${animationDuration}s ease-in-out ${delay}s infinite`
          }}
        />
      );
    }
    return particles;
  };

  return (
    <div className="min-h-screen dashboard-bg-pro">
      {/* Animated background particles */}
      {renderParticles()}

      {/* Enhanced Header */}
      <header className="border-b glass-nav sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-3">
                <Avatar className="h-12 w-12 ring-2 ring-accent/20 hover-glow">
                  <AvatarImage src={user.profileImage || "/placeholder.svg"} />
                  <AvatarFallback className="bg-accent/10 text-accent font-semibold">{userInitials}</AvatarFallback>
                </Avatar>
                <div>
                  <h1 className="text-xl font-bold text-foreground">Welcome back, {user.firstName}!</h1>
                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <MapPin className="h-3 w-3" />
                    <span>{(user as Professional).city || 'Location not set'}</span>
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <div className="flex items-center gap-3 px-4 py-2 rounded-xl glass-card animate-shimmer">
                  <Power className="h-4 w-4" />
                  <span className="text-sm font-medium">Status:</span>
                  <Switch
                    checked={user.isActive || false}
                    onCheckedChange={handleToggleAvailability}
                    disabled={isUpdatingAvailability}
                    className="data-[state=checked]:bg-success"
                  />
                  <span className="text-sm font-semibold">
                    {user.isActive ? 'Available' : 'Unavailable'}
                  </span>
                </div>
                <Badge
                  variant="secondary"
                  className={user.isActive
                    ? "bg-success/10 text-success border-success/20 px-3 py-1 hover-glow"
                    : "bg-muted text-muted-foreground px-3 py-1 hover-glow"
                  }
                >
                  {user.isActive ? '⚡ Available for Jobs' : '🔴 Unavailable'}
                </Badge>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <Button
                variant="outline"
                size="sm"
                className="hover:bg-warning/10 hover:border-warning/50 hover-lift"
                onClick={() => setIsNotificationsOpen(true)}
              >
                <Bell className="h-4 w-4 mr-2" />
                Notifications
                {unreadCount > 0 && (
                  <Badge className="ml-2 bg-warning text-warning-foreground px-1 py-0 text-xs animate-pulse">
                    {unreadCount}
                  </Badge>
                )}
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="hover:bg-accent/10 hover:border-accent/50 hover-lift"
                onClick={debugJobMatching}
              >
                <BarChart3 className="h-4 w-4 mr-2" />
                Debug Jobs
              </Button>
              <Button variant="outline" size="sm" className="hover:bg-accent/10 hover:border-accent/50 hover-lift">
                <Settings className="h-4 w-4 mr-2" />
                Settings
              </Button>
              <Button variant="outline" size="sm" onClick={handleLogout} className="hover:bg-destructive/10 hover:border-destructive/50 hover:text-destructive hover-lift">
                <LogOut className="h-4 w-4 mr-2" />
                Logout
              </Button>
              <div className="relative">
                <Avatar className="h-10 w-10 ring-2 ring-success/30 hover-glow">
                  <AvatarImage src="/placeholder.svg" />
                  <AvatarFallback className="bg-success/10 text-success font-semibold">MS</AvatarFallback>
                </Avatar>

                <Dialog open={isNotificationsOpen} onOpenChange={setIsNotificationsOpen}>
                  <DialogContent className="max-w-xl">
                    <DialogHeader>
                      <div className="flex items-center justify-between">
                        <DialogTitle>Notifications {unreadCount > 0 ? `( ${unreadCount} new )` : ''}</DialogTitle>
                        <div className="flex items-center gap-2">
                          <Button variant="outline" size="sm" onClick={() => loadNotifications()}>Refresh</Button>
                          <Button variant="outline" size="sm" onClick={async () => { await markAllNotificationsAsRead(); }} disabled={unreadCount === 0}>Mark all as read</Button>
                        </div>
                      </div>
                    </DialogHeader>
                    <div className="space-y-3 max-h-[60vh] overflow-auto">
                      {rtNotifications.length === 0 ? (
                        <div className="text-center py-8 text-muted-foreground">No notifications yet</div>
                      ) : (
                        rtNotifications.map((n) => (
                          <div key={n._id} className={`flex items-start gap-3 p-3 rounded-lg border ${!n.isRead ? 'bg-accent/5 border-accent/20' : ''}`}>
                            <div className="mt-1">
                              <Bell className={`h-4 w-4 ${!n.isRead ? 'text-accent' : 'text-muted-foreground'}`} />
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center justify-between">
                                <h4 className="font-semibold">{n.title}</h4>
                                <span className="text-xs text-muted-foreground">{new Date(n.createdAt).toLocaleString()}</span>
                              </div>
                              <p className="text-sm text-muted-foreground">{n.message}</p>
                            </div>
                            {!n.isRead && (
                              <Button size="sm" variant="outline" onClick={async () => { await markNotificationAsRead(n._id); }}>
                                Mark as read
                              </Button>
                            )}
                          </div>
                        ))
                      )}
                    </div>
                  </DialogContent>
                </Dialog>

                <div className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-background animate-pulse ${user.isActive ? 'bg-success' : 'bg-muted'}`}></div>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-6 animate-fade-in">
        <Tabs value={activeTab} onValueChange={handleTabChange} className="space-y-6">
          <TabsList className="grid w-full grid-cols-8 glass-card rounded-xl p-1 interactive-tabs">
            <TabsTrigger value="overview" className="data-[state=active]:bg-accent data-[state=active]:text-accent-foreground hover-glow">Overview</TabsTrigger>
            <TabsTrigger value="jobs" className="data-[state=active]:bg-accent data-[state=active]:text-accent-foreground hover-glow">Jobs</TabsTrigger>
            <TabsTrigger value="earnings" className="data-[state=active]:bg-accent data-[state=active]:text-accent-foreground hover-glow">Earnings</TabsTrigger>
            <TabsTrigger value="calendar" className="data-[state=active]:bg-accent data-[state=active]:text-accent-foreground hover-glow">Calendar</TabsTrigger>
            <TabsTrigger value="reviews" className="data-[state=active]:bg-accent data-[state=active]:text-accent-foreground hover-glow">Reviews</TabsTrigger>
            <TabsTrigger value="notifications" className="data-[state=active]:bg-accent data-[state=active]:text-accent-foreground hover-glow">Notifications</TabsTrigger>
            <TabsTrigger value="analytics" className="data-[state=active]:bg-accent data-[state=active]:text-accent-foreground hover-glow">Analytics</TabsTrigger>
            <TabsTrigger value="profile" className="data-[state=active]:bg-accent data-[state=active]:text-accent-foreground hover-glow">Profile</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            {/* Location-based Services Summary */}
            <Card className="animated-card glass-card border-0 overflow-hidden">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Globe className="h-5 w-5" />
                  Services in {(user as Professional).city || 'Your Area'}
                </CardTitle>
                <CardDescription>
                  Available services and opportunities in your service area
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  {currentLocationServices.map((service, index) => (
                    <div key={index} className="flex items-center gap-2 p-3 rounded-lg bg-accent/5 border border-accent/20">
                      <Wrench className="h-4 w-4 text-accent" />
                      <span className="text-sm font-medium">{service}</span>
                    </div>
                  ))}
                  {currentLocationServices.length === 0 && (
                    <div className="col-span-full text-center py-4 text-muted-foreground">
                      No services configured for your area. Update your location to see available services.
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Quick Stats */}
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
              <Card className="animated-card glass-card border-0 overflow-hidden">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-3 gradient-warning rounded-xl shadow-md group-hover:scale-110 transition-transform duration-300 animate-pulse-glow">
                      <Bell className="h-5 w-5 text-white" />
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Pending Jobs</p>
                      <p className="text-2xl font-bold">
                        {isLoadingStats ?
                          <span className="inline-block w-8 h-8 bg-muted/30 rounded animate-pulse"></span> :
                          dashboardStats?.pendingJobs || 0
                        }
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="animated-card glass-card border-0 overflow-hidden">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-3 gradient-primary rounded-xl shadow-md group-hover:scale-110 transition-transform duration-300 animate-pulse-glow">
                      <Wrench className="h-5 w-5 text-white" />
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Active Jobs</p>
                      <p className="text-2xl font-bold">
                        {isLoadingStats ?
                          <span className="inline-block w-8 h-8 bg-muted/30 rounded animate-pulse"></span> :
                          dashboardStats?.activeJobs || 0
                        }
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="animated-card glass-card border-0 overflow-hidden">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-3 gradient-success rounded-xl shadow-md group-hover:scale-110 transition-transform duration-300 animate-pulse-glow">
                      <DollarSign className="h-5 w-5 text-white" />
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Monthly Earnings</p>
                      <p className="text-2xl font-bold">
                        ${isLoadingStats ?
                          <span className="inline-block w-8 h-8 bg-muted/30 rounded animate-pulse"></span> :
                          dashboardStats?.monthlyEarnings || 0
                        }
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="animated-card glass-card border-0 overflow-hidden">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-3 gradient-accent rounded-xl shadow-md group-hover:scale-110 transition-transform duration-300 animate-pulse-glow">
                      <Star className="h-5 w-5 text-white" />
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Rating</p>
                      <p className="text-2xl font-bold">
                        {isLoadingStats ?
                          <span className="inline-block w-8 h-8 bg-muted/30 rounded animate-pulse"></span> :
                          dashboardStats?.averageRating || 0
                        }
                        <span className="text-sm text-muted-foreground ml-1 animate-fade-in">
                          ({dashboardStats?.totalReviews || 0} reviews)
                        </span>
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="animated-card glass-card border-0 overflow-hidden">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-3 bg-muted/80 rounded-xl shadow-md group-hover:scale-110 transition-transform duration-300 animate-pulse-glow">
                      <TrendingUp className="h-5 w-5 text-foreground" />
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Completion Rate</p>
                      <p className="text-2xl font-bold">
                        {isLoadingStats ?
                          <span className="inline-block w-8 h-8 bg-muted/30 rounded animate-pulse"></span> :
                          "98%"
                        }
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* New Job Requests */}
            <Card>
              <CardHeader>
                <CardTitle>New Job Requests in Your Area</CardTitle>
                <CardDescription>Review and respond to incoming requests near {(user as Professional).city || 'your location'}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {isLoadingAvailableJobs ? (
                  <div className="text-center py-8">
                    <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
                    <p className="text-muted-foreground">Loading available jobs...</p>
                  </div>
                ) : availableJobs.length === 0 ? (
                  <div className="text-center py-8">
                    <AlertCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <p className="text-muted-foreground">No available jobs in your area</p>
                    <p className="text-sm text-muted-foreground">Check back later or expand your service area</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {availableJobs.slice(0, 3).map((job) => (
                      <div key={job._id} className="flex items-center justify-between p-4 border rounded-lg bg-card">
                        <div className="flex items-center gap-4">
                          <Avatar>
                                                          <AvatarFallback>
                                {getUserInitials(job.user)}
                              </AvatarFallback>
                          </Avatar>
                          <div className="flex-1">
                            <h4 className="font-semibold">{job.title}</h4>
                            <p className="text-sm text-muted-foreground">
                              {typeof job.user === 'string' ? 'User' : `${job.user?.firstName} ${job.user?.lastName}`} •
                              <span className="text-primary">{job.location.address}</span>
                            </p>
                            <div className="flex items-center gap-4 mt-2">
                              <div className="flex items-center gap-1">
                                <CalendarIcon className="h-4 w-4 text-muted-foreground" />
                                <span className="text-sm">
                                  {new Date(job.scheduledDate).toLocaleDateString()} at {job.scheduledTime}
                                </span>
                              </div>
                              <div className="flex items-center gap-1">
                                <DollarSign className="h-4 w-4 text-muted-foreground" />
                                <span className="text-sm font-medium">
                                  ${job.budget?.min || 0} - ${job.budget?.max || 'Open'}
                                </span>
                              </div>
                              {(job as any).distance !== undefined && (
                                <Badge variant="outline" className="text-xs">
                                  {(((job as any).distance as number) / 1000).toFixed(1)} km away
                                </Badge>
                              )}
                            </div>
                          </div>
                        </div>
                        <div className="flex gap-2">
                          <Button size="sm" variant="outline">
                            <X className="h-4 w-4 mr-1" />
                            Decline
                          </Button>
                          <Button size="sm" onClick={() => handleAcceptJob(job._id)}>
                            <CheckCircle2 className="h-4 w-4 mr-1" />
                            Accept
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Active Jobs */}
            <Card>
              <CardHeader>
                <CardTitle>Active Jobs</CardTitle>
                <CardDescription>Your current ongoing projects</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {isLoadingJobs ? (
                  <div className="text-center py-8">
                    <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
                    <p className="text-muted-foreground">Loading active jobs...</p>
                  </div>
                ) : jobs.filter(job => ['accepted', 'in_progress'].includes(job.status)).length === 0 ? (
                  <div className="text-center py-8">
                    <AlertCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <p className="text-muted-foreground">No active jobs</p>
                    <p className="text-sm text-muted-foreground">Accept jobs from the Available Jobs tab</p>
                  </div>
                ) : (
                  jobs.filter(job => ['accepted', 'in_progress'].includes(job.status)).slice(0, 2).map((job) => (
                    <div key={job._id} className="flex items-center justify-between p-4 border rounded-lg bg-card">
                      <div className="flex items-center gap-4">
                        <Avatar>
                          <AvatarFallback>
                            {(job.user as User)?.firstName?.[0]}{(job.user as User)?.lastName?.[0]}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <h4 className="font-semibold">{job.title}</h4>
                          <p className="text-sm text-muted-foreground">
                            {(job.user as User)?.firstName} {(job.user as User)?.lastName} • {job.status === 'in_progress' ? 'In Progress' : 'Accepted'}
                            <br />
                            <span className="text-success text-xs">
                              📞 {(job.user as User)?.phone} | ✉️ {(job.user as User)?.email}
                            </span>
                          </p>
                          <div className="flex items-center gap-2 mt-1">
                            <Clock className="h-4 w-4 text-muted-foreground" />
                            <span className="text-sm">
                              {new Date(job.scheduledDate).toLocaleDateString()} at {job.scheduledTime}
                            </span>
                          </div>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <Button size="sm" variant="outline">
                          <MessageCircle className="h-4 w-4 mr-1" />
                          Message
                        </Button>
                        <Button 
                          size="sm"
                          onClick={() => {
                            setSelectedJob(job);
                            setFinalPrice(job.budget?.max || job.budget?.min);
                            setIsCompleteJobDialogOpen(true);
                          }}
                        >
                          Mark Complete
                        </Button>
                      </div>
                    </div>
                  ))
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Jobs Management Tab */}
          <TabsContent value="jobs" className="space-y-6">
            <h2 className="text-xl font-semibold">Job Management</h2>

            <Tabs defaultValue="available" className="space-y-4">
              <TabsList>
                <TabsTrigger value="available">Available Jobs</TabsTrigger>
                <TabsTrigger value="active">Active Jobs</TabsTrigger>
                <TabsTrigger value="completed">Completed Jobs</TabsTrigger>
              </TabsList>

              <TabsContent value="available" className="space-y-4">
                <Card>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle>Available Jobs in Your Area</CardTitle>
                        <CardDescription>Jobs matching your services and location</CardDescription>
                      </div>
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={debugJobMatching}
                        >
                          Debug Matching
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={loadAvailableJobs}
                          disabled={isLoadingAvailableJobs}
                        >
                          <Loader2 className={`h-4 w-4 mr-2 ${isLoadingAvailableJobs ? 'animate-spin' : ''}`} />
                          Refresh
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {isLoadingAvailableJobs ? (
                      <div className="text-center py-8">
                        <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
                        <p className="text-muted-foreground">Loading available jobs...</p>
                      </div>
                    ) : availableJobs.length === 0 ? (
                      <div className="text-center py-8">
                        <AlertCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                        <p className="text-muted-foreground">No available jobs at the moment</p>
                        <p className="text-sm text-muted-foreground mt-2">
                          Jobs are matched based on:
                        </p>
                        <ul className="text-sm text-muted-foreground mt-2 space-y-1">
                          <li>✓ Your services: {(user as any)?.services?.join(', ') || 'None set'}</li>
                          <li>✓ Your city: {(user as any)?.city || 'Not set'}</li>
                          <li>✓ Job status: Pending</li>
                        </ul>
                        <p className="text-sm text-primary mt-4">
                          {!(user as any)?.city && '⚠️ Please set your city in Profile Settings to see jobs'}
                          {!(user as any)?.services?.length && '⚠️ Please add your services in Profile Settings'}
                        </p>
                        <Button
                          variant="outline"
                          size="sm"
                          className="mt-4"
                          onClick={debugJobMatching}
                        >
                          Debug Job Matching
                        </Button>
                      </div>
                    ) : (
                      availableJobs.map((job) => (
                        <div key={job._id} className="flex items-center justify-between p-4 border rounded-lg bg-card">
                          <div className="flex items-center gap-4">
                            <Avatar>
                              <AvatarFallback>
                                {typeof job.user === 'string' ? 'U' : job.user?.firstName?.[0]}{typeof job.user === 'string' ? '' : job.user?.lastName?.[0]}
                              </AvatarFallback>
                            </Avatar>
                            <div className="flex-1">
                              <h4 className="font-semibold">{job.title}</h4>
                              <p className="text-sm text-muted-foreground">
                                {getUserName(job.user)} •
                                <a
                                  className="underline-offset-2 hover:underline text-primary"
                                  href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${job.location.address}, ${job.location.city}, ${job.location.state} ${job.location.zipCode || ''}`)}`}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  title="Open in Google Maps"
                                >
                                  📍 {job.location.address}
                                </a>
                                {typeof job.user !== 'string' && (
                                  <span className="ml-2 text-success">
                                    📞 {job.user.phone} | ✉️ {job.user.email}
                                  </span>
                                )}
                              </p>
                              <div className="flex items-center gap-4 mt-2">
                                <div className="flex items-center gap-1">
                                  <CalendarIcon className="h-4 w-4 text-muted-foreground" />
                                  <span className="text-sm">
                                    {new Date(job.scheduledDate).toLocaleDateString()} at {job.scheduledTime}
                                  </span>
                                </div>
                                <Badge variant="secondary">{job.category}</Badge>
                                {job.budget?.max && (
                                  <Badge variant="outline">
                                    ${job.budget.min || 0} - ${job.budget.max}
                                  </Badge>
                                )}

									{(job as any).distance !== undefined && (
									  <Badge variant="outline" title="Distance from you">
									    {(((job as any).distance as number) / 1000).toFixed(1)} km away
									  </Badge>
									)}

									<a
									  className="text-sm text-primary hover:underline"
									  href={`https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(`${job.location.coordinates?.lat},${job.location.coordinates?.lng}`)}`}
									  target="_blank"
									  rel="noopener noreferrer"
									>
									  Get Directions
									</a>


                              </div>
                            </div>
                          </div>
                          <div className="flex gap-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => {/* View details */}}
                            >
                              <Eye className="h-4 w-4 mr-2" />
                              View
                            </Button>
                            <Button
                              size="sm"
                              onClick={() => handleAcceptJob(job._id)}
                            >
                              <Check className="h-4 w-4 mr-2" />
                              Accept
                            </Button>
                          </div>
                        </div>
                      ))
                    )}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="active" className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle>Active Jobs</CardTitle>
                    <CardDescription>Jobs you're currently working on</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {isLoadingJobs ? (
                      <div className="text-center py-8">
                        <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
                        <p className="text-muted-foreground">Loading active jobs...</p>
                      </div>
                    ) : jobs.filter(job => ['accepted', 'in_progress'].includes(job.status)).length === 0 ? (
                      <div className="text-center py-8">
                        <AlertCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                        <p className="text-muted-foreground">No active jobs</p>
                        <p className="text-sm text-muted-foreground">Accept jobs from the Available Jobs tab</p>
                      </div>
                    ) : (
                      jobs.filter(job => ['accepted', 'in_progress'].includes(job.status)).map((job) => (
                        <div key={job._id} className="flex items-center justify-between p-4 border rounded-lg bg-card">
                          <div className="flex items-center gap-4">
                            <Avatar>
                              <AvatarFallback>
                                {job.user?.firstName?.[0]}{job.user?.lastName?.[0]}
                              </AvatarFallback>
                            </Avatar>
                            <div className="flex-1">
                              <h4 className="font-semibold">{job.title}</h4>
                              <p className="text-sm text-muted-foreground">
                                {job.user?.firstName} {job.user?.lastName} •
                                <a
                                  className="underline-offset-2 hover:underline"
                                  href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${job.location.address}, ${job.location.city}, ${job.location.state} ${job.location.zipCode || ''}`)}`}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                >
                                  {job.location.address}
                                </a>
                              </p>
                              <div className="flex items-center gap-4 mt-2">
                                <Badge variant={job.status === 'in_progress' ? 'default' : 'secondary'}>
                                  {job.status === 'in_progress' ? 'In Progress' : 'Accepted'}
                                </Badge>
                                <div className="flex items-center gap-1">
                                  <CalendarIcon className="h-4 w-4 text-muted-foreground" />
                                  <span className="text-sm">
                                    {new Date(job.scheduledDate).toLocaleDateString()} at {job.scheduledTime}
                                  </span>
                                </div>

									{(job as any).distance !== undefined && (
									  <Badge variant="outline" title="Distance from you">
									    {(((job as any).distance as number) / 1000).toFixed(1)} km away
									  </Badge>
									)}
									{job.location?.coordinates?.lat && job.location?.coordinates?.lng && (
									  <a
									    className="text-sm text-primary hover:underline"
									    href={`https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(`${job.location.coordinates?.lat},${job.location.coordinates?.lng}`)}`}
									    target="_blank"
									    rel="noopener noreferrer"
									  >
									    Get Directions
									  </a>
									)}

                              </div>
                            </div>
                          </div>
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm">
                              <MessageCircle className="h-4 w-4 mr-2" />
                              Message
                            </Button>
                            <Button size="sm">
                              View Details
                            </Button>
                          </div>
                        </div>
                      ))
                    )}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="completed" className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle>Completed Jobs</CardTitle>
                    <CardDescription>Your job history and earnings</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {isLoadingJobs ? (
                      <div className="text-center py-8">
                        <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
                        <p className="text-muted-foreground">Loading completed jobs...</p>
                      </div>
                    ) : completedJobs.length === 0 ? (
                      <div className="text-center py-8">
                        <AlertCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                        <p className="text-muted-foreground">No completed jobs yet</p>
                        <p className="text-sm text-muted-foreground">Complete jobs to see them here</p>
                      </div>
                    ) : (
                      completedJobs.map((job) => (
                        <div key={job._id} className="flex items-center justify-between p-4 border rounded-lg bg-card">
                          <div className="flex items-center gap-4">
                            <Avatar>
                              <AvatarFallback>
                                {job.user?.firstName?.[0]}{job.user?.lastName?.[0]}
                              </AvatarFallback>
                            </Avatar>
                            <div className="flex-1">
                              <h4 className="font-semibold">{job.title}</h4>
                              <p className="text-sm text-muted-foreground">
                                {job.user?.firstName} {job.user?.lastName} •
                                <a
                                  className="underline-offset-2 hover:underline"
                                  href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(`${job.location.address}, ${job.location.city}, ${job.location.state} ${job.location.zipCode || ''}`)}`}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                >

									<div className="flex items-center gap-4 mt-2">
									  {(job as any).distance !== undefined && (
									    <Badge variant="outline" title="Distance from you">
									      {(((job as any).distance as number) / 1000).toFixed(1)} km away
									    </Badge>
									  )}
									  {job.location?.coordinates?.lat && job.location?.coordinates?.lng && (
									    <a
									      className="text-sm text-primary hover:underline"
									      href={`https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(`${job.location.coordinates?.lat},${job.location.coordinates?.lng}`)}`}
									      target="_blank"
									      rel="noopener noreferrer"
									    >
									      Get Directions
									    </a>
									  )}
									</div>

                                  {job.location.address}
                                </a>
                              </p>
                              <div className="flex items-center gap-4 mt-2">
                                <Badge variant="default" className="bg-success text-success-foreground">
                                  Completed
                                </Badge>
                                {job.rating && (
                                  <div className="flex items-center gap-1">
                                    <Star className="h-4 w-4 fill-warning text-warning" />
                                    <span className="text-sm font-medium">{job.rating}</span>
                                  </div>
                                )}
                                {job.finalPrice && (
                                  <Badge variant="outline" className="text-success">
                                    ${job.finalPrice}
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </div>
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm">
                              View Details
                            </Button>
                          </div>
                        </div>
                      ))
                    )}
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </TabsContent>

          {/* Earnings Tab */}
          <TabsContent value="earnings" className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">Earnings & Payouts</h2>
              <Button 
                onClick={() => setIsPayoutDialogOpen(true)}
                disabled={!payoutBalance?.availableBalance || payoutBalance?.availableBalance <= 0 || isLoadingPayoutBalance}
              >
                {isLoadingPayoutBalance ? 'Loading...' : 'Request Payout'}
              </Button>
            </div>

            {/* Bank Account Section */}
            {user && (
              <BankAccountForm 
                professional={user} 
                onUpdate={(updatedProfessional) => {
                  updateUserLocal(updatedProfessional);
                }} 
              />
            )}

            {/* Earnings Summary */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-success/10 rounded-lg">
                      <DollarSign className="h-5 w-5 text-success" />
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Total Earnings (After 10% Fee)</p>
                      <p className="text-2xl font-bold">
                        ₹{isLoadingPayoutBalance ? '...' : (payoutBalance?.totalEarnings || dashboardStats?.totalEarnings || 0).toFixed(2)}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-accent/10 rounded-lg">
                      <TrendingUp className="h-5 w-5 text-accent" />
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Available Balance</p>
                      <p className="text-2xl font-bold text-accent">
                        ₹{isLoadingPayoutBalance ? '...' : (payoutBalance?.availableBalance || 0).toFixed(2)}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-primary/10 rounded-lg">
                      <TrendingUp className="h-5 w-5 text-primary" />
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">This Month (After Fee)</p>
                      <p className="text-2xl font-bold">
                        ₹{isLoadingStats ? '...' : (dashboardStats?.monthlyEarnings || 0).toFixed(2)}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-warning/10 rounded-lg">
                      <Clock className="h-5 w-5 text-warning" />
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Jobs Completed</p>
                      <p className="text-2xl font-bold">
                        {isLoadingStats ? '...' : dashboardStats?.completedJobs || 0}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Recent Completed Jobs with Earnings */}
            <Card>
              <CardHeader>
                <CardTitle>Recent Completed Jobs</CardTitle>
                <CardDescription>Jobs completed with earnings</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {completedJobs.length > 0 ? (
                    completedJobs.map((job) => (
                      <div key={job._id} className="flex items-center justify-between p-3 border rounded-lg">
                        <div className="flex-1">
                          <h4 className="font-medium">{job.title}</h4>
                          <p className="text-sm text-muted-foreground">
                            Completed on {new Date(job.completedAt || job.updatedAt).toLocaleDateString()}
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="font-semibold text-success">
                            ₹{(job.commission?.providerEarnings || job.finalPrice || job.budget?.max || 0).toFixed(2)}
                          </p>
                          {job.commission && (
                            <p className="text-xs text-muted-foreground">
                              (₹{job.finalPrice?.toFixed(2)} - 10% fee)
                            </p>
                          )}
                          <p className="text-xs text-muted-foreground">
                            {job.location?.city}
                          </p>
                        </div>
                      </div>
                    ))
                  ) : (
                    <p className="text-center text-muted-foreground py-4">
                      No completed jobs yet
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Payout History Component */}
            <PayoutHistory />

            {/* Payout Request Dialog */}
            {user && (
              <PayoutRequestDialog
                isOpen={isPayoutDialogOpen}
                onOpenChange={setIsPayoutDialogOpen}
                professional={user as Professional}
                availableBalance={payoutBalance?.availableBalance || 0}
                onSuccess={handlePayoutSuccess}
              />
            )}
          </TabsContent>

          {/* Calendar Tab */}
          <TabsContent value="calendar" className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">Availability Calendar</h2>
              <Button>
                <Settings className="h-4 w-4 mr-2" />
                Set Schedule
              </Button>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-2">
                <Card>
                  <CardContent className="p-6">
                    <Calendar
                      mode="single"
                      selected={selectedDate}
                      onSelect={setSelectedDate}
                      className="rounded-md border w-full"
                    />
                  </CardContent>
                </Card>
              </div>

              <div className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle>Today's Schedule</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="p-3 border rounded bg-primary/5">
                      <p className="font-medium">10:00 AM - Kitchen Repair</p>
                      <p className="text-sm text-muted-foreground">John Doe</p>
                    </div>
                    <div className="p-3 border rounded bg-accent/5">
                      <p className="font-medium">2:00 PM - Bathroom Fix</p>
                      <p className="text-sm text-muted-foreground">Sarah Miller</p>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Quick Actions</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <Button className="w-full" variant="outline">Block Time Off</Button>
                    <Button className="w-full" variant="outline">Set Recurring Schedule</Button>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          {/* Reviews Tab */}
          <TabsContent value="reviews" className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">Customer Reviews</h2>
              <div className="flex items-center gap-2">
                <Star className="h-5 w-5 fill-warning text-warning" />
                <span className="text-lg font-bold">4.9</span>
                <span className="text-muted-foreground">(127 reviews)</span>
              </div>
            </div>

            <Card>
              <CardContent className="p-6">
                <p className="text-center text-muted-foreground">Customer reviews displayed here...</p>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Notifications Tab */}
          <TabsContent value="notifications" className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">Notifications</h2>
              <Button
                variant="outline"
                size="sm"
                onClick={loadNotifications}
              >
                Refresh
              </Button>
            </div>

            <Card>
              <CardContent className="p-6">
                {notifications.length === 0 ? (
                  <div className="text-center py-8">
                    <Bell className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <p className="text-muted-foreground">No notifications</p>
                    <p className="text-sm text-muted-foreground">You're all caught up!</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {notifications.map((notification) => (
                      <div
                        key={notification._id}
                        className={`flex items-start gap-4 p-4 rounded-lg border ${
                          !notification.isRead ? 'bg-primary/5 border-primary/20' : 'bg-muted/20'
                        }`}
                      >
                        <div className={`p-2 rounded-lg ${
                          notification.type === 'job_created' ? 'bg-primary/10' :
                          notification.type === 'payment_received' ? 'bg-success/10' :
                          notification.type === 'review_received' ? 'bg-warning/10' :
                          'bg-muted/10'
                        }`}>
                          {notification.type === 'job_created' && <Wrench className="h-4 w-4 text-primary" />}
                          {notification.type === 'payment_received' && <DollarSign className="h-4 w-4 text-success" />}
                          {notification.type === 'review_received' && <Star className="h-4 w-4 text-warning" />}
                          {!['job_created', 'payment_received', 'review_received'].includes(notification.type) &&
                            <Bell className="h-4 w-4 text-muted-foreground" />}
                        </div>
                        <div className="flex-1">
                          <h4 className="font-semibold">{notification.title}</h4>
                          <p className="text-sm text-muted-foreground">{notification.message}</p>
                          <p className="text-xs text-muted-foreground mt-2">
                            {new Date(notification.createdAt).toLocaleDateString()} at{' '}
                            {new Date(notification.createdAt).toLocaleTimeString()}
                          </p>
                        </div>
                        {!notification.isRead && (
                          <Badge variant="secondary" className="bg-primary/10 text-primary">
                            New
                          </Badge>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Analytics Tab */}
          <TabsContent value="analytics" className="space-y-6">
            <h2 className="text-xl font-semibold">Performance Analytics</h2>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <Card className="hover-scale">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <BarChart3 className="h-5 w-5 text-primary" />
                    <div>
                      <p className="text-sm text-muted-foreground">Job Acceptance Rate</p>
                      <p className="text-2xl font-bold">95%</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="hover-scale">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <Clock className="h-5 w-5 text-accent" />
                    <div>
                      <p className="text-sm text-muted-foreground">Avg Completion Time</p>
                      <p className="text-2xl font-bold">2.3h</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="hover-scale">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <TrendingUp className="h-5 w-5 text-success" />
                    <div>
                      <p className="text-sm text-muted-foreground">Monthly Growth</p>
                      <p className="text-2xl font-bold">+12%</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="hover-scale">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3">
                    <Wrench className="h-5 w-5 text-warning" />
                    <div>
                      <p className="text-sm text-muted-foreground">Popular Service</p>
                      <p className="text-xl font-bold">Plumbing</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Profile Tab */}
          <TabsContent value="profile" className="space-y-6">
            <h2 className="text-xl font-semibold">Profile & Services</h2>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Professional Information</CardTitle>
                  <CardDescription>Update your business details and services</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="text-sm font-medium">Business Name</label>
                    <input 
                      className="w-full mt-1 p-2 border rounded" 
                      defaultValue={(user as Professional).businessName || `${user.firstName}'s Services`}
                      placeholder="Enter your business name"
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Services Offered</label>
                    <div className="mt-2 space-y-2">
                      {['Plumbing', 'Electrical', 'Carpentry', 'Painting', 'Cleaning', 'Appliance Repair', 'HVAC', 'Landscaping', 'Handyman', 'Other'].map((service) => (
                        <label key={service} className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            checked={profileData.services.includes(service)}
                            onChange={() => handleServiceChange(service)}
                            className="rounded"
                          />
                          <span className="text-sm">{service}</span>
                        </label>
                      ))}
                    </div>
                  </div>
                  <div>
                    <label className="text-sm font-medium">Experience (Years)</label>
                    <input 
                      type="number" 
                      className="w-full mt-1 p-2 border rounded" 
                      defaultValue={(user as Professional).experience || 0}
                      min="0"
                      max="50"
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Bio</label>
                    <textarea 
                      className="w-full mt-1 p-2 border rounded" 
                      rows={3}
                      value={profileData.bio}
                      onChange={(e) => setProfileData({ ...profileData, bio: e.target.value })}
                      placeholder="Tell customers about your expertise and experience..."
                    />
                  </div>
                  <Button 
                    className="w-full"
                    onClick={handleUpdateProfile}
                    disabled={isUpdatingProfile}
                  >
                    {isUpdatingProfile ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        Updating...
                      </>
                    ) : (
                      'Update Profile'
                    )}
                  </Button>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Location & Service Area</CardTitle>
                  <CardDescription>Manage your city and service area for job matching</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="text-sm font-medium">City</label>
                      <Input
                        className="w-full mt-1"
                        value={profileData.city}
                        onChange={(e) => setProfileData({ ...profileData, city: e.target.value })}
                        placeholder="e.g., Mumbai, Bangalore"
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium">PIN Code</label>
                      <Input
                        className="w-full mt-1"
                        value={profileData.zipCode}
                        onChange={(e) => {
                          // Only allow numbers and limit to 6 digits
                          const value = e.target.value.replace(/\D/g, '').slice(0, 6);
                          setProfileData({ ...profileData, zipCode: value });
                        }}
                        placeholder="e.g., 400001"
                        maxLength={6}
                      />
                      <p className="text-xs text-muted-foreground mt-1">6-digit Indian PIN code</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Contact Information</CardTitle>
                  <CardDescription>Keep your contact details up to date</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="text-sm font-medium">Email</label>
                    <input 
                      className="w-full mt-1 p-2 border rounded" 
                      defaultValue={user.email || ''}
                      type="email"
                      placeholder="your.email@example.com"
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Phone</label>
                    <input 
                      className="w-full mt-1 p-2 border rounded" 
                      value={profileData.phone}
                      onChange={(e) => setProfileData({ ...profileData, phone: e.target.value })}
                      type="tel"
                      placeholder="+1 (555) 123-4567"
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Address</label>
                    <input 
                      className="w-full mt-1 p-2 border rounded" 
                      value={(user as Professional).address?.street || ''}
                      readOnly
                      placeholder="Street address (set via profile)"
                    />
                  </div>
                  <Button 
                    className="w-full"
                    onClick={handleUpdateProfile}
                    disabled={isUpdatingProfile}
                  >
                    {isUpdatingProfile ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        Saving...
                      </>
                    ) : (
                      'Save Changes'
                    )}
                  </Button>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Services in Your Area</CardTitle>
                  <CardDescription>Services available in {(user as Professional).city || 'your location'}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-3">
                    {currentLocationServices.map((service, index) => (
                      <div key={index} className="flex items-center gap-2 p-3 rounded-lg bg-accent/5 border border-accent/20">
                        <Wrench className="h-4 w-4 text-accent" />
                        <span className="text-sm font-medium">{service}</span>
                        <Badge variant="outline" className="ml-auto text-xs">Active</Badge>
                      </div>
                    ))}
                    {currentLocationServices.length === 0 && (
                      <div className="col-span-2 text-center py-4 text-muted-foreground">
                        <Globe className="h-8 w-8 mx-auto mb-2" />
                        <p>No services configured for your area</p>
                        <p className="text-xs">Update your location to see available services</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>

      {/* Complete Job Dialog */}
      <Dialog open={isCompleteJobDialogOpen} onOpenChange={setIsCompleteJobDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Complete Job</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <p className="text-sm text-muted-foreground mb-4">
                Mark this job as complete and set the final price. The customer will be notified to make the payment.
              </p>
              {selectedJob && (
                <div className="p-4 bg-muted/50 rounded-lg mb-4">
                  <h4 className="font-semibold">{selectedJob.title}</h4>
                  <p className="text-sm text-muted-foreground">
                    {typeof selectedJob.user === 'string' ? 'Customer' : `${selectedJob.user?.firstName} ${selectedJob.user?.lastName}`}
                  </p>
                  {selectedJob.budget && (
                    <p className="text-sm mt-2">
                      Budget: ${selectedJob.budget.min} - ${selectedJob.budget.max || 'Open'}
                    </p>
                  )}
                </div>
              )}
            </div>
            <div>
              <label className="text-sm font-medium">Final Price ($)</label>
              <input
                type="number"
                value={finalPrice || ''}
                onChange={(e) => setFinalPrice(parseFloat(e.target.value))}
                className="w-full mt-1 p-2 border rounded-lg focus:ring-2 focus:ring-primary focus:border-primary"
                placeholder="Enter final price"
                min="0"
                step="0.01"
              />
              <p className="text-xs text-muted-foreground mt-1">
                This is the amount the customer will pay
              </p>
            </div>
            <div className="flex gap-2 justify-end">
              <Button
                variant="outline"
                onClick={() => setIsCompleteJobDialogOpen(false)}
              >
                Cancel
              </Button>
              <Button
                onClick={handleCompleteJob}
                disabled={!finalPrice || finalPrice <= 0}
              >
                Mark as Complete
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>


    </div>
  );
};

export default ProviderDashboard;