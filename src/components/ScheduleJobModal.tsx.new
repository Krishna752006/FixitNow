import React, { useRef, useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Calendar, Clock, MapPin, DollarSign, AlertCircle, Plus, Home, Star, User, UserCheck, UserPlus } from 'lucide-react';
import { toast } from '@/components/ui/use-toast';
import { api, CreateJobData, Professional } from '@/services/api';
import LocationPicker from '@/components/LocationPicker';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Switch } from "@/components/ui/switch"

interface ScheduleJobModalProps {
  onJobScheduled?: () => void;
  category: string;
  user?: any;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

const ScheduleJobModal: React.FC<ScheduleJobModalProps> = ({
  onJobScheduled,
  category,
  user,
  open,
  onOpenChange
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [savedAddresses, setSavedAddresses] = useState<any[]>([]);
  const [selectedAddress, setSelectedAddress] = useState<string | null>(null);
  const [showAddressSelector, setShowAddressSelector] = useState(true);
  const [showLocationPicker, setShowLocationPicker] = useState(false);
  const [professionals, setProfessionals] = useState<Professional[]>([]);
  const [favoriteProviders, setFavoriteProviders] = useState<Professional[]>([]);
  const [isLoadingProfessionals, setIsLoadingProfessionals] = useState(false);
  const [selectedProfessional, setSelectedProfessional] = useState<string | 'auto'>('auto');
  const [showProfessionalSelector, setShowProfessionalSelector] = useState(false);
  
  const [formData, setFormData] = useState<Omit<CreateJobData, 'title' | 'description' | 'budget'>>({
    category: category,
    priority: 'medium',
    location: {
      address: '',
      city: '',
      state: '',
      zipCode: '',
      coordinates: undefined
    },
    scheduledDate: '',
    scheduledTime: '',
    estimatedDuration: 2,
    preferredProfessional: undefined
  });
  
  const [errors, setErrors] = useState<{[key: string]: string}>({});

  // Fetch favorite providers
  const fetchFavoriteProviders = async () => {
    try {
      // Replace with your actual API call to fetch favorite providers
      // const response = await api.getFavoriteProviders();
      // setFavoriteProviders(response.data);
    } catch (error) {
      console.error('Error fetching favorite providers:', error);
      toast({
        title: "Error",
        description: "Failed to load favorite providers. Please try again.",
        variant: "destructive",
      });
    }
  };

  // Fetch available professionals
  const fetchProfessionals = async () => {
    if (!formData.location.city) return;
    
    setIsLoadingProfessionals(true);
    try {
      // Replace with your actual API call to fetch professionals
      // const response = await api.getProfessionals({
      //   service: category,
      //   location: formData.location.city,
      //   availableOn: formData.scheduledDate
      // });
      // setProfessionals(response.data);
    } catch (error) {
      console.error('Error fetching professionals:', error);
      toast({
        title: "Error",
        description: "Failed to load available professionals. You can still proceed and we'll assign one for you.",
        variant: "destructive",
      });
    } finally {
      setIsLoadingProfessionals(false);
    }
  };

  // Toggle professional selection
  const handleProfessionalSelect = (professionalId: string) => {
    setSelectedProfessional(professionalId);
    setFormData(prev => ({
      ...prev,
      preferredProfessional: professionalId === 'auto' ? undefined : professionalId
    }));
  };

  // Toggle favorite status for a provider
  const toggleFavorite = async (professional: Professional, isFavorite: boolean) => {
    try {
      // Replace with your actual API call to toggle favorite status
      // await api.toggleFavoriteProvider(professional._id, isFavorite);
      
      if (isFavorite) {
        setFavoriteProviders(prev => [...prev, professional]);
      } else {
        setFavoriteProviders(prev => prev.filter(p => p._id !== professional._id));
      }
      
      toast({
        title: isFavorite ? "Added to favorites" : "Removed from favorites",
        description: `${professional.firstName} ${professional.lastName} has been ${isFavorite ? 'added to' : 'removed from'} your favorite providers.`,
      });
    } catch (error) {
      console.error('Error updating favorite status:', error);
      toast({
        title: "Error",
        description: `Failed to ${isFavorite ? 'add to' : 'remove from'} favorites. Please try again.`,
        variant: "destructive",
      });
    }
  };

  // Render professional selection dialog
  const renderProfessionalSelector = () => (
    <Dialog open={showProfessionalSelector} onOpenChange={setShowProfessionalSelector}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Choose a Professional</DialogTitle>
          <DialogDescription>
            Select a preferred professional or let us assign the best available.
          </DialogDescription>
        </DialogHeader>
        
        <Tabs defaultValue="available" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="available">Available</TabsTrigger>
            <TabsTrigger value="favorites">Favorites</TabsTrigger>
          </TabsList>
          
          <TabsContent value="available" className="max-h-[400px] overflow-y-auto">
            <div className="space-y-4 mt-4">
              <div 
                className={`flex items-center gap-4 p-3 rounded-lg border ${selectedProfessional === 'auto' ? 'border-primary bg-primary/5' : 'hover:bg-muted/50'}`}
                onClick={() => handleProfessionalSelect('auto')}
              >
                <div className="p-2 rounded-full bg-primary/10">
                  <UserCheck className="h-5 w-5 text-primary" />
                </div>
                <div className="flex-1">
                  <h4 className="font-medium">Auto-assign best available</h4>
                  <p className="text-sm text-muted-foreground">We'll find the best professional for your job</p>
                </div>
                <div className={`h-5 w-5 rounded-full border-2 ${selectedProfessional === 'auto' ? 'border-primary bg-primary' : 'border-muted-foreground'}`}>
                  {selectedProfessional === 'auto' && (
                    <div className="h-2.5 w-2.5 bg-white rounded-full m-0.5" />
                  )}
                </div>
              </div>

              {isLoadingProfessionals ? (
                <div className="flex justify-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary"></div>
                </div>
              ) : professionals.length > 0 ? (
                professionals.map((pro) => (
                  <div 
                    key={pro._id}
                    className={`flex items-center gap-4 p-3 rounded-lg border ${selectedProfessional === pro._id ? 'border-primary bg-primary/5' : 'hover:bg-muted/50'}`}
                    onClick={() => handleProfessionalSelect(pro._id)}
                  >
                    <Avatar className="h-10 w-10">
                      <AvatarImage src={pro.profileImage} alt={pro.firstName} />
                      <AvatarFallback>{pro.firstName?.[0]}{pro.lastName?.[0]}</AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <div className="flex items-center gap-2">
                        <h4 className="font-medium">{pro.firstName} {pro.lastName}</h4>
                        <div className="flex items-center text-yellow-500">
                          <Star className="h-3.5 w-3.5 fill-current" />
                          <span className="text-xs font-medium ml-0.5">{pro.rating?.toFixed(1) || 'New'}</span>
                        </div>
                      </div>
                      <p className="text-sm text-muted-foreground">{pro.businessName || pro.services?.[0] || 'Service Professional'}</p>
                    </div>
                    <button 
                      className="p-1.5 rounded-full hover:bg-muted"
                      onClick={(e) => {
                        e.stopPropagation();
                        const isFavorite = favoriteProviders.some(p => p._id === pro._id);
                        toggleFavorite(pro, !isFavorite);
                      }}
                    >
                      <Star 
                        className={`h-4 w-4 ${favoriteProviders.some(p => p._id === pro._id) ? 'fill-yellow-400 text-yellow-400' : 'text-muted-foreground'}`} 
                      />
                    </button>
                    <div className={`h-5 w-5 rounded-full border-2 ${selectedProfessional === pro._id ? 'border-primary bg-primary' : 'border-muted-foreground'}`}>
                      {selectedProfessional === pro._id && (
                        <div className="h-2.5 w-2.5 bg-white rounded-full m-0.5" />
                      )}
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <User className="h-10 w-10 mx-auto mb-2 text-muted-foreground/50" />
                  <p>No professionals available for this service in your area.</p>
                  <p className="text-sm">We'll assign one for you automatically.</p>
                </div>
              )}
            </div>
          </TabsContent>
          
          <TabsContent value="favorites" className="max-h-[400px] overflow-y-auto">
            {favoriteProviders.length > 0 ? (
              <div className="space-y-4 mt-4">
                {favoriteProviders.map((pro) => (
                  <div 
                    key={pro._id}
                    className={`flex items-center gap-4 p-3 rounded-lg border ${selectedProfessional === pro._id ? 'border-primary bg-primary/5' : 'hover:bg-muted/50'}`}
                    onClick={() => handleProfessionalSelect(pro._id)}
                  >
                    <Avatar className="h-10 w-10">
                      <AvatarImage src={pro.profileImage} alt={pro.firstName} />
                      <AvatarFallback>{pro.firstName?.[0]}{pro.lastName?.[0]}</AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <div className="flex items-center gap-2">
                        <h4 className="font-medium">{pro.firstName} {pro.lastName}</h4>
                        <div className="flex items-center text-yellow-500">
                          <Star className="h-3.5 w-3.5 fill-current" />
                          <span className="text-xs font-medium ml-0.5">{pro.rating?.toFixed(1) || 'New'}</span>
                        </div>
                      </div>
                      <p className="text-sm text-muted-foreground">{pro.businessName || pro.services?.[0] || 'Service Professional'}</p>
                    </div>
                    <button 
                      className="p-1.5 rounded-full hover:bg-muted"
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleFavorite(pro, false);
                      }}
                    >
                      <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                    </button>
                    <div className={`h-5 w-5 rounded-full border-2 ${selectedProfessional === pro._id ? 'border-primary bg-primary' : 'border-muted-foreground'}`}>
                      {selectedProfessional === pro._id && (
                        <div className="h-2.5 w-2.5 bg-white rounded-full m-0.5" />
                      )}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                <Star className="h-10 w-10 mx-auto mb-2 text-muted-foreground/50" />
                <p>You don't have any favorite providers yet.</p>
                <p className="text-sm">Add providers to your favorites for quick access.</p>
              </div>
            )}
          </TabsContent>
        </Tabs>
        
        <div className="flex justify-end gap-2 pt-4">
          <Button 
            variant="outline" 
            onClick={() => setShowProfessionalSelector(false)}
          >
            Cancel
          </Button>
          <Button 
            onClick={() => setShowProfessionalSelector(false)}
          >
            Confirm Selection
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );

  // Rest of your existing component code...
  // [Previous form fields and other code remains the same]

  // Add this new section where you want the professional selection to appear in your form
  const renderProfessionalSelection = () => (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <Label htmlFor="professional">Professional</Label>
        <Button 
          type="button" 
          variant="ghost" 
          size="sm"
          onClick={() => setShowProfessionalSelector(true)}
          className="text-primary"
        >
          {selectedProfessional === 'auto' ? 'Choose Professional' : 'Change'}
        </Button>
      </div>
      
      {selectedProfessional === 'auto' ? (
        <div 
          className="flex items-center gap-3 p-3 border rounded-md cursor-pointer hover:bg-muted/50"
          onClick={() => setShowProfessionalSelector(true)}
        >
          <div className="p-2 rounded-full bg-primary/10">
            <UserCheck className="h-5 w-5 text-primary" />
          </div>
          <div>
            <p className="font-medium">Auto-assign best available</p>
            <p className="text-sm text-muted-foreground">We'll find the best professional for your job</p>
          </div>
        </div>
      ) : (
        <div 
          className="flex items-center gap-3 p-3 border rounded-md cursor-pointer hover:bg-muted/50"
          onClick={() => setShowProfessionalSelector(true)}
        >
          <Avatar className="h-10 w-10">
            <AvatarImage 
              src={professionals.find(p => p._id === selectedProfessional)?.profileImage} 
              alt={professionals.find(p => p._id === selectedProfessional)?.firstName} 
            />
            <AvatarFallback>
              {professionals.find(p => p._id === selectedProfessional)?.firstName?.[0]}
              {professionals.find(p => p._id === selectedProfessional)?.lastName?.[0]}
            </AvatarFallback>
          </Avatar>
          <div>
            <div className="flex items-center gap-2">
              <p className="font-medium">
                {professionals.find(p => p._id === selectedProfessional)?.firstName}{' '}
                {professionals.find(p => p._id === selectedProfessional)?.lastName}
              </p>
              <div className="flex items-center text-yellow-500">
                <Star className="h-3.5 w-3.5 fill-current" />
                <span className="text-xs font-medium ml-0.5">
                  {professionals.find(p => p._id === selectedProfessional)?.rating?.toFixed(1) || 'New'}
                </span>
              </div>
            </div>
            <p className="text-sm text-muted-foreground">
              {professionals.find(p => p._id === selectedProfessional)?.businessName || 
               professionals.find(p => p._id === selectedProfessional)?.services?.[0] || 
               'Service Professional'}
            </p>
          </div>
        </div>
      )}
    </div>
  );

  // Add this to your form where you want the professional selection to appear
  // For example, in the return statement, add it with other form fields:
  // {renderProfessionalSelection()}
  
  // Don't forget to also render the professional selector dialog:
  // {renderProfessionalSelector()}

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Schedule New Service</DialogTitle>
          <DialogDescription>
            Fill in the details below to schedule your {category} service.
          </DialogDescription>
        </DialogHeader>
        
        <div className="space-y-4 py-4">
          {/* Add the professional selection to your form */}
          {renderProfessionalSelection()}
          
          {/* Your existing form fields */}
          <div className="space-y-2">
            <Label htmlFor="title">Service Title</Label>
            <Input 
              id="title" 
              placeholder="E.g., Plumbing repair, Electrical work" 
              value={formData.title}
              onChange={(e) => setFormData({...formData, title: e.target.value})}
            />
            {errors.title && <p className="text-sm text-red-500">{errors.title}</p>}
          </div>
          
          {/* Add other form fields here */}
          
          <Button type="submit" className="w-full" disabled={isLoading}>
            {isLoading ? 'Scheduling...' : 'Schedule Service'}
          </Button>
        </div>
      </DialogContent>
      
      {/* Render the professional selector dialog */}
      {renderProfessionalSelector()}
    </Dialog>
  );
};

export default ScheduleJobModal;
